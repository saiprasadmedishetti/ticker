{"version":3,"sources":["components/Chart.js","App.js","reportWebVitals.js","index.js"],"names":["lineSeries","Chart","price","height","width","useState","data","setData","chartContainerRef","useRef","chart","useEffect","fetch","then","resp","json","Data","current","createChart","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","crosshair","mode","CrosshairMode","Normal","priceScale","borderColor","timeScale","addCandlestickSeries","upColor","downColor","borderDownColor","borderUpColor","wickDownColor","wickUpColor","remove","fitContent","time","open","high","low","close","time_","Date","Number","toLocaleDateString","split","reverse","join","update","ref","App","ws","containerRef","setPrice","direction","setDirection","ticker","setTicker","WebSocket","window","matchMedia","matches","style","innerHeight","onopen","send","JSON","stringify","action","subs","onmessage","e","result","prev","document","title","onclose","className","toFixed","clientHeight","clientWidth","innerWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c5827be1.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { createChart, CrosshairMode } from \"lightweight-charts\";\n\nlet lineSeries;\nconst API_URL =\n  \"https://min-api.cryptocompare.com/data/v2/histoday?fsym=BTC&tsym=USD&limit=100\";\nfunction Chart({ price, height, width }) {\n  const [data, setData] = useState([]);\n  const chartContainerRef = useRef();\n  const chart = useRef();\n  useEffect(() => {}, []);\n  useEffect(() => {\n    fetch(API_URL)\n      .then((resp) => resp.json())\n      .then((data) => setData(data.Data.Data));\n    chart.current = createChart(chartContainerRef.current, {\n      width,\n      height,\n      layout: {\n        backgroundColor: \"#253248\",\n        textColor: \"rgba(255, 255, 255, 0.9)\",\n      },\n      grid: {\n        vertLines: {\n          color: \"#334158\",\n        },\n        horzLines: {\n          color: \"#334158\",\n        },\n      },\n      crosshair: {\n        mode: CrosshairMode.Normal,\n      },\n      priceScale: {\n        borderColor: \"#485c7b\",\n      },\n      timeScale: {\n        borderColor: \"#485c7b\",\n      },\n    });\n    lineSeries = chart.current.addCandlestickSeries({\n      upColor: \"#4bffb5\",\n      downColor: \"#ff4976\",\n      borderDownColor: \"#ff4976\",\n      borderUpColor: \"#4bffb5\",\n      wickDownColor: \"#838ca1\",\n      wickUpColor: \"#838ca1\",\n    });\n    return () => {\n      chart.current.remove();\n      //\n    };\n  }, []);\n  useEffect(() => {\n    lineSeries.setData(data);\n    chart.current.timeScale().fitContent();\n  }, [data]);\n  useEffect(() => {\n    if (lineSeries && price) {\n      const { time, open, high, low, close } = price;\n      const time_ = new Date(Number(time) * 1000)\n        .toLocaleDateString()\n        .split(\"/\")\n        .reverse()\n        .join(\"-\");\n      lineSeries.update({\n        time: time_,\n        open,\n        high,\n        low,\n        close,\n      });\n    }\n  }, [price, lineSeries]);\n\n  return <div ref={chartContainerRef}></div>;\n}\n\nexport default Chart;\n","import { useEffect, useRef, useState } from \"react\";\nimport Chart from \"./components/Chart\";\n\nconst URL = \"wss://streamer.cryptocompare.com/v2?format=streamer\";\n\n// const URL = \"wss://stream.coinmarketcap.com/price/latest\";\n\nfunction App() {\n  const ws = useRef();\n  const containerRef = useRef();\n  const [price, setPrice] = useState();\n  const [direction, setDirection] = useState(\"\");\n  const [ticker, setTicker] = useState(\"\");\n  useEffect(() => {\n    ws.current = new WebSocket(URL);\n    const isDevice = window.matchMedia(\"(max-width: 580px)\").matches;\n    if (isDevice) {\n      containerRef.current.style.height = window.innerHeight + \"px\";\n    }\n  }, []);\n\n  useEffect(() => {\n    if (ws) {\n      ws.current.onopen = () => {\n        ws.current.send(\n          JSON.stringify({\n            action: \"SubAdd\",\n            subs: [\"24~CCCAGG~BTC~USD~m\"],\n          })\n        );\n        // ws.send(\n        //   JSON.stringify({\n        //     method: \"subscribe\",\n        //     id: \"price\",\n        //     data: { cryptoIds: [1], index: null },\n        //   })\n        // );\n        ws.current.onmessage = (e) => {\n          const result = e.data.split(\"~\");\n          // if (result[0] === \"2\" && (result[4] === \"1\" || result[4] === \"2\"))\n          if (result[0] === \"24\") {\n            setPrice((prev) => {\n              if (prev) {\n                prev < result[10] ? setDirection(\"up\") : setDirection(\"down\");\n              }\n              return {\n                time: result[4],\n                open: result[7],\n                high: result[8],\n                low: result[9],\n                close: result[10],\n              };\n            });\n            if (!ticker) {\n              setTicker(result[2] + \"/\" + result[3]);\n            }\n\n            document.title = result[2] + \"-\" + result[3] + \" | \" + result[10];\n          }\n        };\n      };\n    }\n\n    return () => {\n      ws.current.onclose = () => {\n        ws.current.send(\n          JSON.stringify({\n            action: \"SubRemove\",\n            subs: [\"24~CCCAGG~BTC~USD~m\"],\n          })\n        );\n      };\n    };\n  }, [ws]);\n\n  return (\n    <main className=\"container\" ref={containerRef}>\n      {price && price.close && (\n        <div className=\"block\">\n          <h4 className=\"ticker\">{ticker}</h4>\n          <h2\n            className={`price ${\n              direction === \"up\" ? \"up\" : direction === \"down\" ? \"down\" : \"\"\n            }`}\n          >\n            {\"$ \" + Number(price.close).toFixed(2)}\n          </h2>\n        </div>\n      )}\n      <Chart\n        price={price}\n        height={\n          (containerRef &&\n            containerRef.current &&\n            containerRef.current.clientHeight) ||\n          window.innerHeight\n        }\n        width={\n          (containerRef &&\n            containerRef.current &&\n            containerRef.current.clientWidth) ||\n          window.innerWidth\n        }\n      />\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}